/*1. You will be given an array of numbers.

For each number in the array you will need to create an object.

The object key will be the number, as a string. The value will be the corresponding character code, as a string.

Return an array of the resulting objects.

All inputs will be arrays of numbers. All character codes are valid lower case letters. The input array will not be empty.

----------------------------------------------------------------------------------------------------------

2. In this kata, you will be given array of Objects a=[{obj1},{obj2},...]. You will return merged Objects. Incase a key exists in one or more Objects and since you can not have duplicate values for a single key in your final set, you keep the most recent value for that key as show in the example below.

var a={1:'1',2:'2',3:'3'},
    b={3:'4',5:'6',6:'7',7:'8'},
    c={5:'9',8:'9',6:'12',23:'35'}
    o=[a,b,c];
var objConcat=(o)=> {
  return a.concat(b).concat(c) ?
//should return the following
// { '1': '1','2': '2','3': '4','5': '9','6': '12','7': '8','8': '9','23':'35' }
//key 3 exist in both a and b, so in the final result above we keep {3:'4'} because that is most recent seen
// key 5 exist in both b and c, so we keep {5:'9'} from c
// key 6 exist in both b and c so we keep {6:'12'} from c
};

----------------------------------------------------------------------------------------------------------

3. You'll be passed an array of objects (list) - you must sort them in descending order based on the value of the specified property (sortBy).

Example
When sorted by "a", this:

[
  {"a": 1, "b": 3},
  {"a": 3, "b": 2},
  {"a": 2, "b": 40},
  {"a": 4, "b": 12}
]
should return:

[
  {"a": 4, "b": 12},
  {"a": 3, "b": 2},
  {"a": 2, "b": 40},
  {"a": 1, "b": 3}
]

#Made by Adrian Zu√±iga
*/